[tox]
minversion = 3.24
envlist = default
isolated_build = True


[testenv]
description = Invokes any tests with pytest
allowlist_externals =
    black
    flake8
    isort
    mypy
    pytest
    sphinx*
    twine
setenv =
    TOXINIDIR = {toxinidir}
    PYTHONPATH = {toxinidir}/src:{toxinidir}/modules
passenv =
    AWS_*
    SETUPTOOLS_*
    TOXINIDIR
    TWINE_*
extras =
    black
    dev
    flake8
    isort
    mypy
commands =
    black {posargs}
    flake8 {posargs}
    isort {posargs}
    mypy {posargs}
    pytest {posargs}


[testenv:{build,clean}]
description =
    build: Triggers the pacakge to build according to PEP517 standards
    clean: Remove any old distribution files and temporary build artifacts in .build and .dist
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
passenv =
    {[testenv]passenv}
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docks/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}


[testenv:default]
description =
    The standard set of things to do when executing tox
changedir = {toxinidir}
passenv =
    {[testenv]passenv}
deps =
    {[testenv:build]deps}
commands =
    {[testenv:clean]commands}
    {[testenv:build]commands}

    {[testenv:docs]commands}
    {[testenv:doctests]commands}
    {[testenv:linkcheck]commands}

    {[testenv:pre-publish]commands}


[testenv:{docs,doctests,linkcheck}]
description =
    docs: Triggers sphinx-build to create the documentation
    doctests: Triggers sphinx-build to run any doctests
    linkcheck: Triggers linkcheck to look for broken documentation links
passenv =
    {[testenv]passenv}
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/docs/requirements.txt
commands =
    sphinx-build \
    --color -b {env:BUILD} \
    -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}


[testenv:format]
description =
    Triggers black to run against the codebase
deps =
    black
skip_install = True
commands =
    black modules --check
    black src --check
    black tests --check


[testenv:lint]
description =
    Triggers flake8 to run against the codebase for linting
deps =
    flake8
skip_install = True
commands =
    flake8 modules
    flake8 src
    flake8 tests


[testenv:pre-publish]
description =
    Any tasks to preform prior to publishing the compiled package
passenv =
    {[testenv]passenv}
commands =
    {[testenv:format]commands}
    {[testenv:lint]commands}
    {[testenv:sort]commands}
    {[testenv:test]commands}

[testenv:publish]
description =
    Triggers the package to be published to your configured package index server.
    By default, this will use the specified repository in the pyirc file.
skip_install = True
changedir = {toxinidir}
passenv =
    {[testenv]passenv}
deps =
    twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository codeartifact} dist/*


[testenv:sort]
description =
    Triggers isort to target the specified directories
passenv =
    {[testenv]passenv}
deps =
    isort
commands =
    isort modules --check
    isort src --check
    isort tests --check


[testenv:test]
description =
    Trigger automated tests
deps =
    pytest
passenv =
    {[testenv]passenv}
exclude =
    __pycache__
    .eggs
    .git
    .venv
    .pycicd
    build
    dist
    docs
    py
commands =
    pytest tests


[flake8]
max_line_length = 88
extend_ignore = E203, W503, E501
# Black compatibility above
exclude =
    __pycache__
    .eggs
    .git
    .venv
    .pycicd
    build
    dist
    docs
    py
